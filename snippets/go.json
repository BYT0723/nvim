{
    "func_test": {
        "prefix": "ftest",
        "body": [
            "func Test${1:Name}(t *testing.T) {",
            "\t${2}",
            "}${0}"
        ],
        "description": "test function for golang"
    },
    "for ranger": {
        "prefix": "fori",
        "body": [
            "for ${1:i} := ${2:0}; ${1:i} < ${3:count}; ${1:i}${4:++} {",
            "   ${5}",
            "}${0}"
        ],
        "description": "for range in i"
    },
    "OKCheck": {
        "prefix": "ifok",
        "body": [
            "if ${1:var},ok := ${2:express}; ok{",
            "\t${3}",
            "}${0}"
        ],
        "description": "check express ok"
    },
    "author": {
        "prefix": "todo",
        "body": [
            "/*",
            "   Author  : BYT0723",
            "   Date    : $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            "   Email   : twang9739@gmail.com",
            "*/"
        ],
        "description": "Author"
    },
    "fmt.Sprintf": {
        "prefix": "fsf",
        "body": [
            "fmt.Sprintf(\"${1}\",${2})${0}"
        ],
        "description": "fmt.Sprintf()"
    },
    "middleware": {
        "prefix": "middle",
        "body": [
            "type Middleware func(http.HandlerFunc) http.HandlerFunc",
            "",
            "func Chain(f http.HandlerFunc, middlewares ...Middleware) http.HandlerFunc {",
            "\tfor _, m := range middlewares {",
            "\t\tf = m(f)",
            "\t}",
            "\treturn f",
            "}$0"
        ],
        "description": "base of middleware"
    },
    "middleFunction": {
        "prefix": "fmiddle",
        "body": [
            "func ${1:Name}($2) Middleware {",
            "\treturn func(hf http.HandlerFunc) http.HandlerFunc {",
            "\t\treturn func(rw http.ResponseWriter, r *http.Request) {",
            "\t\t\t$3",
            "\t\t\thf(rw, r)",
            "\t\t}",
            "\t}",
            "}$0"
        ],
        "description": "function of middleware"
    }
}
